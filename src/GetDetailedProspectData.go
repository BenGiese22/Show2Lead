package main

import (
	"strings"
	"net/http"
	"io/ioutil"
	"encoding/json"
)

type ProspectDetailResponse struct {
	Response struct {
		Status string `json:"status"`
		Data []struct {
			CreatedAt            string `json:"created_at"`
			Name                 string `json:"name"`
			Email                string `json:"email"`
			Phone                string `json:"phone"`
			Showtime             string `json:"showtime"`
			Address              string `json:"Address"`
			Unit                 string `json:"Unit"`
			ShowingWasScheduled  string `json:"showing_was_scheduled"`
			ShowingMethod        string `json:"showing_method"`
			NoShow               string `json:"no_show"`
			CurrentStatus        string `json:"current_status"`
			LeadSource           string `json:"lead_source"`
			ReferrerURL          string `json:"referrer_url"`
			SourceEmailAutoreply string `json:"source_email_autoreply"`
			SourceShowmojoPhone  string `json:"source_showmojo_phone"`
			TeamMember           string `json:"team_member"`
			Comments             string `json:"comments"`
			Answer8151           string `json:"answer_8151"`
			Answer8152           string `json:"answer_8152"`
			Answer8153           string `json:"answer_8153"`
			Answer8261           string `json:"answer_8261"`
			Answer8263           string `json:"answer_8263"`
			Answer8275           string `json:"answer_8275"`
		} `json:"data"`
	} `json:"response"`
}

func GetProspectDetails(startTime string, endTime string) (ProspectDetailResponse) {
	body2 := readProspects(startTime, endTime)
	//println(body2)
	var response ProspectDetailResponse
	json.Unmarshal(body2, &response)
	return response
}
func readProspects(startDate string, endDate string) []byte {//tod handle errs
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	//body := strings.NewReader(`start_date=2017-11-20 19:00:00&end_date=2017-11-20 20:00:00`)
	body := strings.NewReader(`start_date=` + startDate + `&end_date=` + endDate)

	req, err := http.NewRequest("POST", "https://showmojo.com/api/v3/reports/detailed_prospect_data", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Authorization", "Token token=\"ec6b7cb47c6f1270949f16215227afd9\"") //todo add to configuration
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
	body2, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		//handle err
	}
	return body2
}
